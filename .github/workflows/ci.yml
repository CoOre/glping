name: CI/CD Pipeline

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        python -m mypy glping/ --ignore-missing-imports || true

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      run: |
        python -m pytest tests/ --cov=glping --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            binary_name: glping-linux
            binary_ext: ''
          - os: windows-latest
            binary_name: glping-windows
            binary_ext: '.exe'
          - os: macos-latest
            binary_name: glping-macos
            binary_ext: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install PyInstaller and verify
      shell: bash
      run: |
        python -m venv venv
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./venv/Scripts/python.exe -m pip install --upgrade pip
          ./venv/Scripts/python.exe -m pip install -e ".[dev]"
          ./venv/Scripts/pyinstaller.exe --version
        else
          ./venv/bin/python -m pip install --upgrade pip
          ./venv/bin/python -m pip install -e ".[dev]"
          ./venv/bin/pyinstaller --version
        fi

    - name: Build binary with PyInstaller
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          ./venv/Scripts/pyinstaller.exe --onefile --name glping${{ matrix.binary_ext }} run_cli.py \
            --add-data "glping:glping" \
            --hidden-import=plyer \
            --hidden-import=dotenv \
            --hidden-import=click \
            --hidden-import=requests \
            --hidden-import=aiohttp \
            --hidden-import=gitlab \
            --collect-all glping
        else
          ./venv/bin/pyinstaller --onefile --name glping${{ matrix.binary_ext }} run_cli.py \
            --add-data "glping:glping" \
            --hidden-import=plyer \
            --hidden-import=dotenv \
            --hidden-import=click \
            --hidden-import=requests \
            --hidden-import=aiohttp \
            --hidden-import=gitlab \
            --collect-all glping
        fi

    - name: Rename binary
      run: |
        mv dist/glping${{ matrix.binary_ext }} dist/${{ matrix.binary_name }}${{ matrix.binary_ext }}

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.os }}
        path: dist/${{ matrix.binary_name }}${{ matrix.binary_ext }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-binaries]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'chore(release):')
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install semantic-release and build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-semantic-release build wheel twine toml

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Download binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries/
        pattern: binary-*
        merge-multiple: true

    - name: Create Release with Semantic Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Создаем релиз с помощью semantic-release
        semantic-release version --commit --tag --push

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !startsWith(github.event.head_commit.message, 'chore(release):')
    environment: production

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true