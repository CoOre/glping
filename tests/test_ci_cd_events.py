#!/usr/bin/env python3

import os
import sys
import unittest
from unittest.mock import Mock

# Add the parent directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from glping.utils.event_utils import (
    get_event_description,
    get_job_status_emoji,
    get_deployment_status_emoji,
    job_to_event,
    deployment_to_event,
    get_pipeline_status_emoji
)


class TestCICDEvents(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CI/CD —Å–æ–±—ã—Ç–∏–π GitLab"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.sample_project = {
            "id": 123,
            "name_with_namespace": "test-group/ci-project",
            "name": "ci-project"
        }

    def test_pipeline_skipped_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ skipped –¥–ª—è pipeline"""
        self.assertEqual(get_pipeline_status_emoji("skipped"), "‚è≠Ô∏è")
        
        event = {
            "target_type": "Pipeline",
            "action_name": "updated",
            "author": {"name": "–°–∏—Å—Ç–µ–º–∞ CI/CD"},
            "target_id": 456,
            "data": {"status": "skipped", "ref": "main"},
            "created_at": "2025-10-06T12:00:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Pipeline #456 –ø—Ä–æ–ø—É—â–µ–Ω", description)
        self.assertIn("–¥–ª—è main", description)

    def test_job_status_emoji(self):
        """–¢–µ—Å—Ç emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ job"""
        self.assertEqual(get_job_status_emoji("success"), "‚úÖ")
        self.assertEqual(get_job_status_emoji("failed"), "‚ùå")
        self.assertEqual(get_job_status_emoji("running"), "üîÑ")
        self.assertEqual(get_job_status_emoji("pending"), "‚è≥")
        self.assertEqual(get_job_status_emoji("canceled"), "üö´")
        self.assertEqual(get_job_status_emoji("skipped"), "‚è≠Ô∏è")
        self.assertEqual(get_job_status_emoji("manual"), "‚è∏Ô∏è")
        self.assertEqual(get_job_status_emoji("unknown"), "‚ùì")

    def test_job_event_description(self):
        """–¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è job —Å–æ–±—ã—Ç–∏–π"""
        event = {
            "target_type": "Job",
            "action_name": "updated",
            "author": {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"},
            "target_id": 789,
            "data": {
                "status": "success",
                "name": "build",
                "stage": "test"
            },
            "created_at": "2025-10-06T12:05:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Job 'build' —É—Å–ø–µ—à–Ω–æ", description)
        self.assertIn("(stage: test)", description)
        self.assertIn("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", description)

    def test_job_event_without_name(self):
        """–¢–µ—Å—Ç job —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –∏–º–µ–Ω–∏"""
        event = {
            "target_type": "Job",
            "action_name": "updated",
            "author": {"name": "–°–∏—Å—Ç–µ–º–∞ CI/CD"},
            "target_id": 101,
            "data": {"status": "failed"},
            "created_at": "2025-10-06T12:10:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Job #101 —Å –æ—à–∏–±–∫–æ–π", description)
        self.assertIn("–°–∏—Å—Ç–µ–º–∞ CI/CD", description)

    def test_job_to_event_conversion(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ job –≤ —Å–æ–±—ã—Ç–∏–µ"""
        job = {
            "id": 456,
            "status": "success",
            "name": "test",
            "stage": "test",
            "ref": "main",
            "created_at": "2025-10-06T12:15:00Z",
            "duration": 120,
            "user": {
                "name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
                "username": "annasmirnova"
            }
        }
        
        event = job_to_event(job, self.sample_project)
        
        self.assertEqual(event["id"], "job_456")
        self.assertEqual(event["target_type"], "Job")
        self.assertEqual(event["target_id"], 456)
        self.assertEqual(event["data"]["status"], "success")
        self.assertEqual(event["data"]["name"], "test")
        self.assertEqual(event["data"]["stage"], "test")
        self.assertEqual(event["author"]["name"], "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞")

    def test_job_to_event_without_user(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ job –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        job = {
            "id": 789,
            "status": "failed",
            "name": "deploy",
            "created_at": "2025-10-06T12:20:00Z"
        }
        
        event = job_to_event(job, self.sample_project)
        
        self.assertEqual(event["author"]["name"], "–°–∏—Å—Ç–µ–º–∞ CI/CD")
        self.assertEqual(event["author"]["username"], "system")

    def test_deployment_status_emoji(self):
        """–¢–µ—Å—Ç emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ deployment"""
        self.assertEqual(get_deployment_status_emoji("created"), "üìù")
        self.assertEqual(get_deployment_status_emoji("running"), "üöÄ")
        self.assertEqual(get_deployment_status_emoji("success"), "‚úÖ")
        self.assertEqual(get_deployment_status_emoji("failed"), "‚ùå")
        self.assertEqual(get_deployment_status_emoji("canceled"), "üö´")
        self.assertEqual(get_deployment_status_emoji("skipped"), "‚è≠Ô∏è")
        self.assertEqual(get_deployment_status_emoji("unknown"), "‚ùì")

    def test_deployment_event_description(self):
        """–¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è deployment —Å–æ–±—ã—Ç–∏–π"""
        event = {
            "target_type": "Deployment",
            "action_name": "updated",
            "author": {"name": "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤"},
            "target_id": 202,
            "data": {
                "status": "success",
                "environment": "production"
            },
            "created_at": "2025-10-06T12:25:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ #202 —É—Å–ø–µ—à–Ω–æ", description)
        self.assertIn("–≤ production", description)
        self.assertIn("–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤", description)

    def test_deployment_event_without_environment(self):
        """–¢–µ—Å—Ç deployment —Å–æ–±—ã—Ç–∏—è –±–µ–∑ environment"""
        event = {
            "target_type": "Deployment",
            "action_name": "updated",
            "author": {"name": "–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞"},
            "target_id": 303,
            "data": {"status": "running"},
            "created_at": "2025-10-06T12:30:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ #303 –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", description)
        self.assertIn("–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞", description)
        # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "–≤ " (—Å –ø—Ä–æ–±–µ–ª–æ–º) - –Ω–µ—Ç environment
        self.assertNotIn(" –≤ ", description)

    def test_deployment_to_event_conversion(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ deployment –≤ —Å–æ–±—ã—Ç–∏–µ"""
        deployment = {
            "id": 404,
            "status": "success",
            "environment": "staging",
            "ref": "main",
            "created_at": "2025-10-06T12:35:00Z",
            "updated_at": "2025-10-06T12:40:00Z",
            "user": {
                "name": "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
                "username": "dmitryvolkov"
            }
        }
        
        event = deployment_to_event(deployment, self.sample_project)
        
        self.assertEqual(event["id"], "deployment_404")
        self.assertEqual(event["target_type"], "Deployment")
        self.assertEqual(event["target_id"], 404)
        self.assertEqual(event["data"]["status"], "success")
        self.assertEqual(event["data"]["environment"], "staging")
        self.assertEqual(event["author"]["name"], "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤")

    def test_deployment_to_event_without_user(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ deployment –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        deployment = {
            "id": 505,
            "status": "failed",
            "environment": "production",
            "created_at": "2025-10-06T12:45:00Z"
        }
        
        event = deployment_to_event(deployment, self.sample_project)
        
        self.assertEqual(event["author"]["name"], "–°–∏—Å—Ç–µ–º–∞ CI/CD")
        self.assertEqual(event["author"]["username"], "system")

    def test_all_job_statuses(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ job"""
        statuses = ["success", "failed", "running", "pending", "canceled", "skipped", "manual"]
        expected_words = ["—É—Å–ø–µ—à–Ω–æ", "—Å –æ—à–∏–±–∫–æ–π", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–æ–∂–∏–¥–∞–µ—Ç", "–æ—Ç–º–µ–Ω–µ–Ω", "–ø—Ä–æ–ø—É—â–µ–Ω", "–≤—Ä—É—á–Ω—É—é"]
        
        for status, expected in zip(statuses, expected_words):
            event = {
                "target_type": "Job",
                "action_name": "updated",
                "author": {"name": "Test User"},
                "target_id": 1,
                "data": {"status": status, "name": "test-job"},
                "created_at": "2025-10-06T12:00:00Z"
            }
            
            description = get_event_description(event)
            self.assertIn(expected, description, f"–°—Ç–∞—Ç—É—Å {status} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{expected}'")

    def test_all_deployment_statuses(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ deployment"""
        statuses = ["created", "running", "success", "failed", "canceled", "skipped"]
        expected_words = ["—Å–æ–∑–¥–∞–Ω–æ", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "—É—Å–ø–µ—à–Ω–æ", "—Å –æ—à–∏–±–∫–æ–π", "–æ—Ç–º–µ–Ω–µ–Ω–æ", "–ø—Ä–æ–ø—É—â–µ–Ω–æ"]
        
        for status, expected in zip(statuses, expected_words):
            event = {
                "target_type": "Deployment",
                "action_name": "updated",
                "author": {"name": "Test User"},
                "target_id": 1,
                "data": {"status": status, "environment": "test"},
                "created_at": "2025-10-06T12:00:00Z"
            }
            
            description = get_event_description(event)
            self.assertIn(expected, description, f"–°—Ç–∞—Ç—É—Å {status} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{expected}'")


class TestCICDIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    def test_job_and_deployment_uniqueness(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID –¥–ª—è job –∏ deployment —Å–æ–±—ã—Ç–∏–π"""
        project = {"id": 123, "name_with_namespace": "test/test"}
        
        job = {"id": 100, "status": "success", "created_at": "2025-10-06T12:00:00Z"}
        deployment = {"id": 100, "status": "success", "created_at": "2025-10-06T12:00:00Z"}
        
        job_event = job_to_event(job, project)
        deployment_event = deployment_to_event(deployment, project)
        
        # ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –∏—Å—Ö–æ–¥–Ω–æ–º ID
        self.assertNotEqual(job_event["id"], deployment_event["id"])
        self.assertEqual(job_event["id"], "job_100")
        self.assertEqual(deployment_event["id"], "deployment_100")

    def test_ci_cd_event_date_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ CI/CD —Å–æ–±—ã—Ç–∏—è—Ö"""
        project = {"id": 123, "name_with_namespace": "test/test"}
        
        job = {
            "id": 200,
            "status": "success",
            "name": "test",
            "created_at": "2025-10-06T15:30:00Z"
        }
        
        event = job_to_event(job, project)
        description = get_event_description(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        self.assertTrue("06.10" in description or "2025-10-06" in description)


def run_ci_cd_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã CI/CD —Å–æ–±—ã—Ç–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CI/CD —Å–æ–±—ã—Ç–∏–π GitLab")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestCICDEvents))
    suite.addTests(loader.loadTestsFromTestCase(TestCICDIntegration))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã CI/CD —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {len(result.failures)} –æ—à–∏–±–æ–∫, {len(result.errors)} —Å–±–æ–µ–≤")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    run_ci_cd_tests()