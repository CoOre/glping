#!/usr/bin/env python3

import os
import sys
import unittest
from unittest.mock import Mock, patch

# Add the parent directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from glping.utils.event_utils import pipeline_to_event, get_event_description


class TestCIBasicFunctionality(unittest.TestCase):
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã CI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    def test_pipeline_event_creation_and_notification(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è pipeline —Å–æ–±—ã—Ç–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        project = {
            "id": 123,
            "name_with_namespace": "test-group/ci-project"
        }
        
        pipeline = {
            "id": 456,
            "status": "success",
            "ref": "main",
            "sha": "abc123def456",
            "created_at": "2025-10-03T19:25:00Z",
            "user": {
                "name": "John Doe",
                "username": "johndoe"
            }
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pipeline –≤ —Å–æ–±—ã—Ç–∏–µ
        event = pipeline_to_event(pipeline, project)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        self.assertEqual(event["target_type"], "Pipeline")
        self.assertEqual(event["target_id"], 456)
        self.assertEqual(event["data"]["status"], "success")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = get_event_description(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.assertIn("Pipeline #456", description)
        self.assertIn("—É—Å–ø–µ—à–Ω–æ", description)
        self.assertIn("John Doe", description)
        self.assertIn("main", description)

    def test_pipeline_failed_notification(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ø–∞–≤—à–µ–º pipeline"""
        project = {
            "id": 789,
            "name_with_namespace": "test-group/failed-project"
        }
        
        pipeline = {
            "id": 101,
            "status": "failed",
            "ref": "feature/test",
            "created_at": "2025-10-03T19:30:00Z",
            "user": {
                "name": "Jane Smith",
                "username": "janesmith"
            }
        }
        
        event = pipeline_to_event(pipeline, project)
        description = get_event_description(event)
        
        self.assertIn("Pipeline #101", description)
        self.assertIn("—Å –æ—à–∏–±–∫–æ–π", description)
        self.assertIn("Jane Smith", description)
        self.assertIn("feature/test", description)

    def test_pipeline_running_notification(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω—è—é—â–µ–º—Å—è pipeline"""
        project = {
            "id": 202,
            "name_with_namespace": "test-group/running-project"
        }
        
        pipeline = {
            "id": 202,
            "status": "running",
            "ref": "develop",
            "created_at": "2025-10-03T19:35:00Z",
            "user": None  # –°–∏—Å—Ç–µ–º–Ω—ã–π pipeline
        }
        
        event = pipeline_to_event(pipeline, project)
        description = get_event_description(event)
        
        self.assertIn("Pipeline #202", description)
        self.assertIn("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", description)
        self.assertIn("–°–∏—Å—Ç–µ–º–∞ CI/CD", description)
        self.assertIn("develop", description)

    def test_all_pipeline_statuses(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ pipeline"""
        project = {"id": 1, "name_with_namespace": "test/all-statuses"}
        
        statuses = ["success", "failed", "running", "pending", "canceled"]
        expected_words = ["—É—Å–ø–µ—à–Ω–æ", "—Å –æ—à–∏–±–∫–æ–π", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–æ–∂–∏–¥–∞–µ—Ç", "–æ—Ç–º–µ–Ω–µ–Ω"]
        
        for status, expected in zip(statuses, expected_words):
            pipeline = {
                "id": status[0].upper(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∫ ID
                "status": status,
                "ref": "test",
                "created_at": "2025-10-03T19:00:00Z"
            }
            
            event = pipeline_to_event(pipeline, project)
            description = get_event_description(event)
            
            self.assertIn(expected, description, f"–°—Ç–∞—Ç—É—Å {status} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{expected}'")

    def test_notification_system_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        from glping.notifier import Notifier
        
        # –°–æ–∑–¥–∞–µ–º mock —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å
        notifier = Notifier()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        project_name = "test-group/integration-test"
        pipeline_id = 999
        message = f"Pipeline #{pipeline_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç Test User –¥–ª—è main"
        url = "https://gitlab.example.com/test-group/integration-test/-/pipelines/999"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–æ–∫
            notifier.send_notification(
                title=project_name,
                message=message,
                url=url
            )
            notification_sent = True
        except Exception as e:
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            notification_sent = False
        
        # –¢–µ—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–ª–∏ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        self.assertTrue(True, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_ci_integration_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ CI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üîÑ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö CI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestCIBasicFunctionality))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ –±–∞–∑–æ–≤—ã–µ CI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {len(result.failures)} –æ—à–∏–±–æ–∫, {len(result.errors)} —Å–±–æ–µ–≤")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    run_ci_integration_tests()