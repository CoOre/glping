#!/usr/bin/env python3

import os
import sys
import unittest
from unittest.mock import Mock

# Add the parent directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from glping.utils.event_utils import get_event_description


class TestNewEvents(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π GitLab"""

    def test_merge_request_reopened(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è Merge Request"""
        event = {
            "target_type": "MergeRequest",
            "action_name": "reopened",
            "author": {"name": "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞"},
            "target_title": "Fix critical bug",
            "created_at": "2025-10-06T10:00:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Merge Request –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç", description)
        self.assertIn("–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", description)
        self.assertIn("Fix critical bug", description)

    def test_merge_request_unapproved(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç–∑—ã–≤–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è Merge Request"""
        event = {
            "target_type": "MergeRequest",
            "action_name": "unapproved",
            "author": {"name": "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤"},
            "target_title": "Add new feature",
            "created_at": "2025-10-06T10:05:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–û–¥–æ–±—Ä–µ–Ω–∏–µ Merge Request –æ—Ç–æ–∑–≤–∞–Ω–æ", description)
        self.assertIn("–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤", description)

    def test_merge_request_review_requested(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≤—å—é Merge Request"""
        event = {
            "target_type": "MergeRequest",
            "action_name": "review_requested",
            "author": {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"},
            "target_title": "Refactor code",
            "created_at": "2025-10-06T10:10:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä–µ–≤—å—é Merge Request", description)
        self.assertIn("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", description)

    def test_merge_request_ready(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ MR –≤ —Å—Ç–∞—Ç—É—Å Ready"""
        event = {
            "target_type": "MergeRequest",
            "action_name": "ready",
            "author": {"name": "–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞"},
            "target_title": "Update documentation",
            "created_at": "2025-10-06T10:15:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Merge Request –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å Ready", description)
        self.assertIn("–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞", description)

    def test_merge_request_draft(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ MR –≤ —Å—Ç–∞—Ç—É—Å Draft"""
        event = {
            "target_type": "MergeRequest",
            "action_name": "draft",
            "author": {"name": "–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"},
            "target_title": "WIP: New implementation",
            "created_at": "2025-10-06T10:20:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("Merge Request –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å Draft", description)
        self.assertIn("–ï–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", description)

    def test_issue_updated(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        event = {
            "target_type": "Issue",
            "action_name": "updated",
            "author": {"name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤"},
            "target_title": "Bug in authentication",
            "created_at": "2025-10-06T10:25:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", description)
        self.assertIn("–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤", description)
        self.assertIn("Bug in authentication", description)

    def test_issue_moved(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        event = {
            "target_type": "Issue",
            "action_name": "moved",
            "author": {"name": "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤"},
            "target_title": "Performance issue",
            "created_at": "2025-10-06T10:30:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞", description)
        self.assertIn("–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤", description)

    def test_push_new_branch(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏"""
        event = {
            "action_name": "pushed new",
            "author": {"name": "–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤"},
            "push_data": {
                "ref": "refs/heads/feature/new-branch",
                "action": "created",
                "commit_count": 0
            },
            "created_at": "2025-10-06T10:35:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞", description)
        self.assertIn("feature/new-branch", description)
        self.assertIn("–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤", description)

    def test_push_delete_branch(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∏"""
        event = {
            "action_name": "pushed",
            "author": {"name": "–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞"},
            "push_data": {
                "ref": "refs/heads/old-branch",
                "action": "removed",
                "commit_count": 0
            },
            "created_at": "2025-10-06T10:40:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–í–µ—Ç–∫–∞ old-branch —É–¥–∞–ª–µ–Ω–∞", description)
        self.assertIn("–ê–Ω–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞", description)

    def test_push_tag_created(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞"""
        event = {
            "action_name": "pushed",
            "author": {"name": "–ú–∏—Ö–∞–∏–ª –ü–æ–ø–æ–≤"},
            "push_data": {
                "ref": "refs/tags/v2.0.0",
                "action": "created",
                "commit_title": "Release version 2.0.0"
            },
            "created_at": "2025-10-06T10:45:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–°–æ–∑–¥–∞–Ω —Ç–µ–≥ v2.0.0", description)
        self.assertIn("–ú–∏—Ö–∞–∏–ª –ü–æ–ø–æ–≤", description)
        self.assertIn("Release version 2.0.0", description)

    def test_push_tag_deleted(self):
        """–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞"""
        event = {
            "action_name": "pushed",
            "author": {"name": "–û–ª—å–≥–∞ –ë–µ–ª–æ–≤–∞"},
            "push_data": {
                "ref": "refs/tags/old-version",
                "action": "removed",
                "commit_count": 0
            },
            "created_at": "2025-10-06T10:50:00Z"
        }
        
        description = get_event_description(event)
        self.assertIn("–£–¥–∞–ª–µ–Ω —Ç–µ–≥ old-version", description)
        self.assertIn("–û–ª—å–≥–∞ –ë–µ–ª–æ–≤–∞", description)


def run_new_events_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π GitLab")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestNewEvents))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {len(result.failures)} –æ—à–∏–±–æ–∫, {len(result.errors)} —Å–±–æ–µ–≤")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    run_new_events_tests()