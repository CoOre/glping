#!/usr/bin/env python3

import os
import sys
import unittest
from datetime import datetime, timezone
from unittest.mock import Mock, patch

# Add the parent directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from glping.utils.event_utils import (
    pipeline_to_event, 
    is_new_pipeline_event, 
    save_pipeline_event_to_cache,
    get_event_description,
    get_pipeline_status_emoji
)


class TestPipelineEvents(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pipeline —Å–æ–±—ã—Ç–∏–π"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.sample_project = {
            "id": 123,
            "name_with_namespace": "test-group/test-project",
            "name": "test-project"
        }
        
        self.sample_pipeline = {
            "id": 456,
            "status": "success",
            "ref": "main",
            "sha": "abc123def456",
            "source": "push",
            "created_at": "2025-10-03T19:30:00Z",
            "updated_at": "2025-10-03T19:35:00Z",
            "duration": 300,
            "web_url": "https://gitlab.example.com/test-group/test-project/-/pipelines/456",
            "user": {
                "name": "John Doe",
                "username": "johndoe",
                "avatar_url": "https://gitlab.example.com/uploads/-/system/user/avatar/1/avatar.png"
            }
        }

    def test_pipeline_to_event_conversion(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pipeline –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è"""
        event = pipeline_to_event(self.sample_pipeline, self.sample_project)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        self.assertEqual(event["id"], "pipeline_456_success")
        self.assertEqual(event["target_type"], "Pipeline")
        self.assertEqual(event["action_name"], "updated")
        self.assertEqual(event["target_id"], 456)
        self.assertEqual(event["target_iid"], 456)
        self.assertEqual(event["project_id"], 123)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞
        self.assertEqual(event["author"]["name"], "John Doe")
        self.assertEqual(event["author"]["username"], "johndoe")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ pipeline
        self.assertEqual(event["data"]["status"], "success")
        self.assertEqual(event["data"]["ref"], "main")
        self.assertEqual(event["data"]["sha"], "abc123def456")
        self.assertEqual(event["data"]["source"], "push")
        self.assertEqual(event["data"]["duration"], 300)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        self.assertEqual(event["created_at"], "2025-10-03T19:30:00Z")
        self.assertEqual(event["updated_at"], "2025-10-03T19:35:00Z")

    def test_pipeline_to_event_without_user(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pipeline –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        pipeline_no_user = {
            **self.sample_pipeline,
            "user": None
        }
        
        event = pipeline_to_event(pipeline_no_user, self.sample_project)
        
        self.assertEqual(event["author"]["name"], "–°–∏—Å—Ç–µ–º–∞ CI/CD")
        self.assertEqual(event["author"]["username"], "system")
        self.assertEqual(event["author"]["avatar_url"], "")

    def test_pipeline_to_event_minimal_data(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ pipeline —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        minimal_pipeline = {
            "id": 789,
            "status": "failed",
            "created_at": "2025-10-03T20:00:00Z"
        }
        
        event = pipeline_to_event(minimal_pipeline, self.sample_project)
        
        self.assertEqual(event["id"], "pipeline_789_failed")
        self.assertEqual(event["data"]["status"], "failed")
        self.assertEqual(event["author"]["name"], "–°–∏—Å—Ç–µ–º–∞ CI/CD")

    def test_is_new_pipeline_event(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ pipeline —Å–æ–±—ã—Ç–∏—è"""
        mock_cache = Mock()
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        mock_cache.get_project_events.return_value = None
        self.assertTrue(is_new_pipeline_event(self.sample_pipeline, 123, mock_cache))
        
        # –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à–µ
        mock_cache.get_project_events.return_value = {"pipeline_456_success"}
        self.assertFalse(is_new_pipeline_event(self.sample_pipeline, 123, mock_cache))
        
        # –¢–µ—Å—Ç –¥—Ä—É–≥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à–µ
        mock_cache.get_project_events.return_value = {"pipeline_123"}
        self.assertTrue(is_new_pipeline_event(self.sample_pipeline, 123, mock_cache))

    def test_save_pipeline_event_to_cache(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pipeline —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à"""
        mock_cache = Mock()
        
        save_pipeline_event_to_cache(self.sample_pipeline, 123, mock_cache)
        
        mock_cache.save_project_event.assert_called_once_with(123, "pipeline_456_success")

    def test_pipeline_event_description(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è pipeline —Å–æ–±—ã—Ç–∏—è"""
        event = pipeline_to_event(self.sample_pipeline, self.sample_project)
        description = get_event_description(event)
        
        self.assertIn("Pipeline #456 —É—Å–ø–µ—à–Ω–æ", description)
        self.assertIn("–¥–ª—è main", description)
        self.assertIn("John Doe", description)

    def test_pipeline_status_emoji(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ pipeline"""
        self.assertEqual(get_pipeline_status_emoji("success"), "‚úÖ")
        self.assertEqual(get_pipeline_status_emoji("failed"), "‚ùå")
        self.assertEqual(get_pipeline_status_emoji("running"), "üèÉ")
        self.assertEqual(get_pipeline_status_emoji("pending"), "‚è≥")
        self.assertEqual(get_pipeline_status_emoji("canceled"), "üö´")
        self.assertEqual(get_pipeline_status_emoji("unknown"), "‚ùì")

    def test_pipeline_event_description_different_statuses(self):
        """–¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ pipeline"""
        statuses = ["success", "failed", "running", "pending", "canceled"]
        expected_descriptions = [
            "—É—Å–ø–µ—à–Ω–æ", "—Å –æ—à–∏–±–∫–æ–π", "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–æ–∂–∏–¥–∞–µ—Ç", "–æ—Ç–º–µ–Ω–µ–Ω"
        ]
        
        for status, expected in zip(statuses, expected_descriptions):
            pipeline = {**self.sample_pipeline, "status": status}
            event = pipeline_to_event(pipeline, self.sample_project)
            description = get_event_description(event)
            
            self.assertIn(expected, description)

    def test_pipeline_event_with_branch(self):
        """–¢–µ—Å—Ç pipeline —Å–æ–±—ã—Ç–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ç–∫–∏"""
        pipeline_with_branch = {
            **self.sample_pipeline,
            "ref": "feature/new-feature"
        }
        
        event = pipeline_to_event(pipeline_with_branch, self.sample_project)
        description = get_event_description(event)
        
        self.assertIn("–¥–ª—è feature/new-feature", description)

    def test_pipeline_event_without_branch(self):
        """–¢–µ—Å—Ç pipeline —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ç–∫–∏"""
        pipeline_no_branch = {
            **self.sample_pipeline,
            "ref": ""
        }
        
        event = pipeline_to_event(pipeline_no_branch, self.sample_project)
        description = get_event_description(event)
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "–¥–ª—è"
        self.assertNotIn("–¥–ª—è", description)

    def test_pipeline_event_date_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ pipeline —Å–æ–±—ã—Ç–∏–∏"""
        event = pipeline_to_event(self.sample_pipeline, self.sample_project)
        description = get_event_description(event)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (—Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º)
        self.assertTrue("03.10" in description or "2025-10-03" in description)


class TestPipelineIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è pipeline —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""

    def test_multiple_pipeline_statuses(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ pipelines"""
        project = {
            "id": 123,
            "name_with_namespace": "test-group/test-project"
        }
        
        pipelines = [
            {"id": 1, "status": "success", "created_at": "2025-10-03T19:00:00Z"},
            {"id": 2, "status": "failed", "created_at": "2025-10-03T19:10:00Z"},
            {"id": 3, "status": "running", "created_at": "2025-10-03T19:20:00Z"},
        ]
        
        events = [pipeline_to_event(pipeline, project) for pipeline in pipelines]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        self.assertEqual(len(events), 3)
        
        for i, event in enumerate(events):
            self.assertEqual(event["target_type"], "Pipeline")
            self.assertEqual(event["data"]["status"], pipelines[i]["status"])
            
            description = get_event_description(event)
            if pipelines[i]["status"] == "success":
                self.assertIn("—É—Å–ø–µ—à–Ω–æ", description)
            elif pipelines[i]["status"] == "failed":
                self.assertIn("—Å –æ—à–∏–±–∫–æ–π", description)
            elif pipelines[i]["status"] == "running":
                self.assertIn("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", description)

    def test_pipeline_event_uniqueness(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID pipeline —Å–æ–±—ã—Ç–∏–π"""
        project = {"id": 123, "name_with_namespace": "test/test"}
        
        pipeline1 = {"id": 100, "status": "success", "created_at": "2025-10-03T19:00:00Z"}
        pipeline2 = {"id": 101, "status": "failed", "created_at": "2025-10-03T19:10:00Z"}
        
        event1 = pipeline_to_event(pipeline1, project)
        event2 = pipeline_to_event(pipeline2, project)
        
        # ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏
        self.assertNotEqual(event1["id"], event2["id"])
        self.assertEqual(event1["id"], "pipeline_100_success")
        self.assertEqual(event2["id"], "pipeline_101_failed")


def run_pipeline_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã pipeline —Å–æ–±—ã—Ç–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ pipeline —Å–æ–±—ã—Ç–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTests(loader.loadTestsFromTestCase(TestPipelineEvents))
    suite.addTests(loader.loadTestsFromTestCase(TestPipelineIntegration))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if result.wasSuccessful():
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã pipeline —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print(f"‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã: {len(result.failures)} –æ—à–∏–±–æ–∫, {len(result.errors)} —Å–±–æ–µ–≤")
    
    return result.wasSuccessful()


if __name__ == "__main__":
    run_pipeline_tests()