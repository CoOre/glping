#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import time
import asyncio
from datetime import datetime, timezone, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

from glping.async_gitlab_api import AsyncGitLabAPI
from glping.async_watcher import AsyncGitLabWatcher
from glping.config import Config


def create_mock_projects(count: int, active_only: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    projects = []
    base_time = datetime.now(timezone.utc)
    
    for i in range(count):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Ä–∞–∑–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        if active_only:
            # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)
            activity_time = base_time - timedelta(minutes=i*5)
        else:
            # –°–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: –ø–æ–ª–æ–≤–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–∞—Ä—ã–µ
            if i < count // 2:
                activity_time = base_time - timedelta(minutes=i*5)  # –ê–∫—Ç–∏–≤–Ω—ã–µ
            else:
                activity_time = base_time - timedelta(days=i)  # –°—Ç–∞—Ä—ã–µ
        
        projects.append({
            "id": i + 1,
            "name": f"Project {i + 1}",
            "name_with_namespace": f"Group / Project {i + 1}",
            "last_activity_at": activity_time.strftime("%Y-%m-%dT%H:%M:%SZ"),
            "path_with_namespace": f"group/project-{i + 1}"
        })
    
    return projects


async def simulate_old_approach(project_count: int = 100):
    """–°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ + –ª–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)"""
    print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å {project_count} –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ API
    mock_api = AsyncMock(spec=AsyncGitLabAPI)
    
    # –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥: –ø–æ–ª—É—á–∞–µ–º –í–°–ï –ø—Ä–æ–µ–∫—Ç—ã
    all_projects = create_mock_projects(project_count, active_only=False)
    mock_api.get_projects.return_value = all_projects
    mock_api.get_project_events.return_value = []
    
    # –°–æ–∑–¥–∞–µ–º watcher
    config = MagicMock()
    config.gitlab_url = "https://gitlab.example.com"
    config.gitlab_token = "test_token"
    config.cache_file = ":memory:"
    config.get_project_filter.return_value = {"membership": True}
    
    with patch('glping.async_watcher.AsyncGitLabAPI', return_value=mock_api):
        watcher = AsyncGitLabWatcher(config)
        watcher.api = mock_api
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        last_checked = (datetime.now(timezone.utc) - timedelta(hours=2)).isoformat()
        await watcher.cache.set_last_checked_async(last_checked)
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()
        await watcher.check_projects(verbose=False)
        end_time = time.time()
        
        execution_time = end_time - start_time
        api_calls = mock_api.get_projects.call_count
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫")
        print(f"üì° API –∑–∞–ø—Ä–æ—Å—ã: {api_calls}")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(all_projects)}")
        print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {len([p for p in all_projects if datetime.fromisoformat(p['last_activity_at'].replace('Z', '+00:00')) > datetime.fromisoformat(last_checked.replace('Z', '+00:00'))])}")
        
        return execution_time, api_calls


async def simulate_new_approach(project_count: int = 100):
    """–°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)"""
    print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —Å {project_count} –ø—Ä–æ–µ–∫—Ç–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ API
    mock_api = AsyncMock(spec=AsyncGitLabAPI)
    
    # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    active_projects = create_mock_projects(project_count // 2, active_only=True)  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
    mock_api.get_projects.return_value = active_projects
    mock_api.get_project_events.return_value = []
    
    # –°–æ–∑–¥–∞–µ–º watcher
    config = MagicMock()
    config.gitlab_url = "https://gitlab.example.com"
    config.gitlab_token = "test_token"
    config.cache_file = ":memory:"
    config.get_project_filter.return_value = {"membership": True}
    
    with patch('glping.async_watcher.AsyncGitLabAPI', return_value=mock_api):
        watcher = AsyncGitLabWatcher(config)
        watcher.api = mock_api
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        last_checked = (datetime.now(timezone.utc) - timedelta(hours=2)).isoformat()
        await watcher.cache.set_last_checked_async(last_checked)
        
        # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = time.time()
        await watcher.check_projects(verbose=False)
        end_time = time.time()
        
        execution_time = end_time - start_time
        api_calls = mock_api.get_projects.call_count
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫")
        print(f"üì° API –∑–∞–ø—Ä–æ—Å—ã: {api_calls}")
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(active_projects)}")
        print(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {len(active_projects)}")
        
        return execution_time, api_calls


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤\n")
    
    project_counts = [50, 100, 200, 500]
    
    print("üìä –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print("=" * 80)
    print(f"{'–ü—Ä–æ–µ–∫—Ç–æ–≤':<10} {'–°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥':<15} {'–ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥':<15} {'–£—Å–∫–æ—Ä–µ–Ω–∏–µ':<10} {'–≠–∫–æ–Ω–æ–º–∏—è API':<12}")
    print("-" * 80)
    
    for count in project_counts:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {count} –ø—Ä–æ–µ–∫—Ç–∞–º–∏:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
        old_time, old_calls = await simulate_old_approach(count)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
        new_time, new_calls = await simulate_new_approach(count)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        speedup = old_time / new_time if new_time > 0 else float('inf')
        api_savings = old_calls - new_calls
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {count} –ø—Ä–æ–µ–∫—Ç–æ–≤:")
        print(f"   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        print(f"   üì° –≠–∫–æ–Ω–æ–º–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤: {api_savings}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        print(f"{count:<10} {old_time:.3f}s ({old_calls} –∑–∞–ø—Ä–æ—Å–æ–≤)<{new_time:.3f}s ({new_calls} –∑–∞–ø—Ä–æ—Å–æ–≤)<{speedup:.1f}x<{api_savings} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    print("\n" + "=" * 80)
    print("‚úÖ –í—ã–≤–æ–¥—ã:")
    print("   ‚Ä¢ –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ –ú–µ–Ω—å—à–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("   ‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    print("   ‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ GitLab —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")


if __name__ == "__main__":
    asyncio.run(main())