#!/usr/bin/env python3

import asyncio
import sys

import click

from .config import Config
from .watcher import GitLabWatcher
from .lock import process_lock


def _handle_test_operations(test_notification, test_stacking, reset_cache, reset_installation_date, config):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitLab"""
    if test_notification:
        from .notifier import Notifier
        notifier = Notifier()
        notifier.test_notification()
        return True
    
    if test_stacking:
        import os
        
        # Add the parent directory to Python path
        sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        from tests.test_notification_stacking import test_notification_stacking
        
        test_notification_stacking()
        return True
    
    if reset_cache:
        from .cache import Cache
        cache = Cache(config.cache_file)
        cache.reset()
        print("–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
        return True
    
    if reset_installation_date:
        from .cache import Cache
        cache = Cache(config.cache_file)
        cache.reset_installation_date()
        return True
    
    return False


@click.command()
@click.option("--once", is_flag=True, help="–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫")
@click.option("--daemon", is_flag=True, help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞")
@click.option(
    "--interval", type=int, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç .env)"
)
@click.option("--verbose", is_flag=True, help="–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
@click.option("--reset-cache", is_flag=True, help="–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")
@click.option("--project", type=int, help="–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
@click.option("--test-notification", is_flag=True, help="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
@click.option("--test-stacking", is_flag=True, help="–¢–µ—Å—Ç —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
@click.option(
    "--async",
    "use_async",
    is_flag=True,
    help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–±—ã—Å—Ç—Ä–µ–µ)",
)
@click.option(
    "--optimized", is_flag=True, help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
)
@click.option(
    "--reset-installation-date",
    is_flag=True,
    help="–°–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —Å—É—Ç–æ–∫",
)
def main(
    once,
    daemon,
    interval,
    verbose,
    reset_cache,
    project,
    test_notification,
    test_stacking,
    use_async,
    optimized,
    reset_installation_date,
):
    """CLI-—É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ GitLab"""
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    try:
        config = Config()
        
        if project:
            config.set_project_id(project)
        
        if interval:
            config.check_interval = interval
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if _handle_test_operations(test_notification, test_stacking, reset_cache, reset_installation_date, config):
            return
            
    except ValueError as e:
        click.echo(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        click.echo("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        click.echo(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    with process_lock("glping") as locked:
        if not locked:
            click.echo("–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
            sys.exit(0)
        
        try:
            # –û–ø–µ—Ä–∞—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitLab
            if use_async:
                from .async_watcher import AsyncGitLabWatcher
                watcher = AsyncGitLabWatcher(config)
                print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
            else:
                watcher = GitLabWatcher(config)

            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –∑–∞–º–µ–Ω—è–µ–º notifier
            if optimized and not use_async:
                from .optimized_notifier import OptimizedNotifier
                watcher.notifier = OptimizedNotifier()
                print("‚ö° –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –±–∞—Ç—á–∏–Ω–≥–æ–º")

            if once and daemon:
                click.echo("–û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ --once –∏ --daemon")
                sys.exit(1)

            if not once and not daemon:
                daemon = True

            if once:
                if use_async:
                    success = asyncio.run(watcher.run_once(verbose))
                else:
                    success = watcher.run_once(verbose)
                sys.exit(0 if success else 1)
            elif daemon:
                if use_async:
                    success = asyncio.run(watcher.run_daemon(verbose))
                else:
                    success = watcher.run_daemon(verbose)
                sys.exit(0 if success else 1)

        except ValueError as e:
            click.echo(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
        except KeyboardInterrupt:
            click.echo("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(0)
        except Exception as e:
            click.echo(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if verbose:
                import traceback
                traceback.print_exc()
            sys.exit(1)


if __name__ == "__main__":
    main()
