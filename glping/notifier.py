import os
import platform
import subprocess
import uuid
import webbrowser
from typing import Optional


class Notifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.system = platform.system()
        self.is_cron = self._detect_cron_environment()
        
    def _detect_cron_environment(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ crontab"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ crontab –æ–∫—Ä—É–∂–µ–Ω–∏—è
        cron_indicators = []
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (—Å–∏–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        if not os.isatty(0):
            cron_indicators.append('no_tty')
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è crontab –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
        if any(key in os.environ for key in ['CRON_TZ', 'MAILTO']):
            cron_indicators.append('cron_vars')
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Linux)
        if self.system == "Linux" and len(os.environ) < 15:
            cron_indicators.append('minimal_env')
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ DISPLAY –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è Linux, –≥–¥–µ –æ–Ω–∞ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å)
        if self.system == "Linux" and not os.environ.get('DISPLAY'):
            cron_indicators.append('no_display')
        
        # macOS —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.system == "Darwin":
            # –í macOS cron –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            if len(os.environ) < 8:
                cron_indicators.append('macos_minimal_env')
            # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö GUI –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ macOS
            gui_vars = ['TERM_PROGRAM', 'TERM_PROGRAM_VERSION', 'VSCODE_PID', 'ITERM_SESSION_ID']
            if not any(var in os.environ for var in gui_vars):
                cron_indicators.append('no_gui_vars')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–ª–∏ 2 —Å–ª–∞–±—ã—Ö, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ cron
        strong_indicators = ['cron_vars']
        weak_indicators = ['no_tty', 'minimal_env', 'no_display', 'macos_minimal_env', 'no_gui_vars']
        
        has_strong = any(ind in strong_indicators for ind in cron_indicators)
        weak_count = sum(1 for ind in cron_indicators if ind in weak_indicators)
        
        return has_strong or weak_count >= 2

    def send_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.is_cron:
            print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ crontab –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        success = False

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if self.system == "Darwin":  # macOS
            success = self._send_macos_notification(title, message, url, icon_url)
        elif self.system == "Linux":
            success = self._send_linux_notification(title, message, url, icon_url)
        elif self.system == "Windows":
            success = self._send_windows_notification(title, message, url, icon_url)

        if not success:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            self._console_notification(title, message, url)
        else:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{title}] {message}")

    def _send_macos_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ macOS"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = str(uuid.uuid4())

        # –ú–µ—Ç–æ–¥ 1: terminal-notifier (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            cmd = [
                "terminal-notifier",
                "-title",
                title,
                "-message",
                message,
                "-sound",
                "default",
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º–µ–Ω—ã
                "-group",
                f"glping-{notification_id[:8]}",  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                "-timeout",
                "10",  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ]

            # –í crontab –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
            if not self.is_cron:
                cmd.extend(["-activate", "com.apple.Terminal"])
            else:
                # –í cron –∏—Å–ø–æ–ª—å–∑—É–µ–º Finder –≤–º–µ—Å—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                cmd.extend(["-activate", "com.apple.Finder"])

            # –£–±–∏—Ä–∞–µ–º ID –¥–ª—è —á–∏—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # cmd.extend(["-subtitle", f"ID: {notification_id[:8]}"])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if icon_url:
                cmd.extend(["-appIcon", icon_url])

            if url:
                cmd.extend(["-open", url])

            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                return True
        except FileNotFoundError:
            pass  # terminal-notifier –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ terminal-notifier: {e}")

        # –ú–µ—Ç–æ–¥ 2: osascript (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π) - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            safe_title = title.replace('"', '\\"')
            safe_message = message.replace('"', '\\"')
            cmd = [
                "osascript",
                "-e",
                f'display notification "{safe_message}" with title "{safe_title}" subtitle "{notification_id[:8]}"',
            ]
            subprocess.run(cmd, check=True)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ osascript: {e}")

        return False

    def _send_linux_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Linux"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            notification_id = str(uuid.uuid4())[:8]

            cmd = [
                "notify-send",
                title,
                message,
                "-a",
                "GitLab Ping",
                "-u",
                "normal",
                "-t",
                "10000",  # 10 —Å–µ–∫—É–Ω–¥
                "-h",
                "string:x-canonical-private-synchronous:glping",
                "-h",
                f"string:desktop-entry:{notification_id}",
            ]

            # –í crontab –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º DISPLAY –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if self.is_cron and not os.environ.get('DISPLAY'):
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å DISPLAY –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                possible_displays = [':0', ':1', ':0.0', ':1.0']
                for display in possible_displays:
                    try:
                        test_cmd = ['xset', 'q']
                        env = os.environ.copy()
                        env['DISPLAY'] = display
                        subprocess.run(test_cmd, env=env, capture_output=True, timeout=1)
                        cmd.extend(['--', f'DISPLAY={display}'])
                        break
                    except (FileNotFoundError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
                        continue

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if icon_url:
                cmd.extend(["-i", icon_url])

            if url:
                cmd.extend(["-h", f"string:x-dunst-stack-tag:{notification_id}"])

            # –í crontab –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            if self.is_cron:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                if not env.get('DBUS_SESSION_BUS_ADDRESS'):
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ DBUS —Å–µ—Å—Å–∏—é
                    try:
                        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
                        for line in result.stdout.split('\n'):
                            if 'dbus-daemon' in line and '--session' in line:
                                parts = line.split()
                                for i, part in enumerate(parts):
                                    if part.startswith('DBUS_SESSION_BUS_ADDRESS='):
                                        env['DBUS_SESSION_BUS_ADDRESS'] = part.split('=', 1)[1]
                                        break
                    except Exception:
                        pass

            subprocess.run(cmd, check=True, env=env)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ notify-send: {e}")
            return False

    def _send_windows_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Windows"""
        try:
            from win10toast import ToastNotifier

            toaster = ToastNotifier()

            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º–µ–Ω—ã
            unique_title = f"{title} [{str(uuid.uuid4())[:8]}]"

            # –î–ª—è Windows URL –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback
            # –ò–∫–æ–Ω–∫–∞ –≤ Windows –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ icon_path, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if url:
                toaster.show_toast(
                    unique_title,
                    message,
                    duration=10,
                    callback_on_click=lambda: webbrowser.open(url),
                )
            else:
                toaster.show_toast(unique_title, message, duration=10)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def _console_notification(
        self, title: str, message: str, url: Optional[str] = None
    ):
        """–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        print(f"\nüîî [{title}] {message}")
        if url:
            print(f"üîó –°—Å—ã–ª–∫–∞: {url}")
        print()

    def _open_url(self, url: str):
        """–û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            webbrowser.open(url)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL: {e}")

    def test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        self.send_notification(
            title="–¢–µ—Å—Ç GitLab Ping",
            message="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!",
            url="https://gitlab.com",
            icon_url="https://gitlab.com/assets/favicon-72a2cad5025aa931d6ea56c3201d1f18e8951c71e3363e712a476bead75f0a83.png",
        )
