import platform
import subprocess
import uuid
import webbrowser
from typing import Optional


class Notifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.system = platform.system()

    def send_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        success = False

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if self.system == "Darwin":  # macOS
            success = self._send_macos_notification(title, message, url, icon_url)
        elif self.system == "Linux":
            success = self._send_linux_notification(title, message, url, icon_url)
        elif self.system == "Windows":
            success = self._send_windows_notification(title, message, url, icon_url)

        if not success:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            self._console_notification(title, message, url)
        else:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{title}] {message}")

    def _send_macos_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ macOS"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_id = str(uuid.uuid4())

        # –ú–µ—Ç–æ–¥ 1: terminal-notifier (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç–µ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            cmd = [
                "terminal-notifier",
                "-title",
                title,
                "-message",
                message,
                "-sound",
                "default",
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º–µ–Ω—ã
                "-group",
                f"glping-{notification_id[:8]}",  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                "-activate",
                "com.apple.Terminal",  # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
                "-timeout",
                "10",  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            cmd.extend(["-subtitle", f"ID: {notification_id[:8]}"])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if icon_url:
                cmd.extend(["-appIcon", icon_url])

            if url:
                cmd.extend(["-open", url])

            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                return True
        except FileNotFoundError:
            pass  # terminal-notifier –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ terminal-notifier: {e}")

        # –ú–µ—Ç–æ–¥ 2: osascript (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π) - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            safe_title = title.replace('"', '\\"')
            safe_message = message.replace('"', '\\"')
            cmd = [
                "osascript",
                "-e",
                f'display notification "{safe_message}" with title "{safe_title}" subtitle "{notification_id[:8]}"',
            ]
            subprocess.run(cmd, check=True)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ osascript: {e}")

        return False

    def _send_linux_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Linux"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            notification_id = str(uuid.uuid4())[:8]

            cmd = [
                "notify-send",
                title,
                message,
                "-a",
                "GitLab Ping",
                "-u",
                "normal",
                "-t",
                "10000",  # 10 —Å–µ–∫—É–Ω–¥
                "-h",
                "string:x-canonical-private-synchronous:glping",
                "-h",
                f"string:desktop-entry:{notification_id}",
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if icon_url:
                cmd.extend(["-i", icon_url])

            if url:
                cmd.extend(["-h", f"string:x-dunst-stack-tag:{notification_id}"])

            subprocess.run(cmd, check=True)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ notify-send: {e}")
            return False

    def _send_windows_notification(
        self,
        title: str,
        message: str,
        url: Optional[str] = None,
        icon_url: Optional[str] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ Windows"""
        try:
            from win10toast import ToastNotifier

            toaster = ToastNotifier()

            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–º–µ–Ω—ã
            unique_title = f"{title} [{str(uuid.uuid4())[:8]}]"

            # –î–ª—è Windows URL –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback
            # –ò–∫–æ–Ω–∫–∞ –≤ Windows –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ icon_path, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            if url:
                toaster.show_toast(
                    unique_title,
                    message,
                    duration=10,
                    callback_on_click=lambda: webbrowser.open(url),
                )
            else:
                toaster.show_toast(unique_title, message, duration=10)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Windows —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def _console_notification(
        self, title: str, message: str, url: Optional[str] = None
    ):
        """–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        print(f"\nüîî [{title}] {message}")
        if url:
            print(f"üîó –°—Å—ã–ª–∫–∞: {url}")
        print()

    def _open_url(self, url: str):
        """–û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            webbrowser.open(url)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å URL: {e}")

    def test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        self.send_notification(
            title="–¢–µ—Å—Ç GitLab Ping",
            message="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!",
            url="https://gitlab.com",
            icon_url="https://gitlab.com/assets/favicon-72a2cad5025aa931d6ea56c3201d1f18e8951c71e3363e712a476bead75f0a83.png",
        )
