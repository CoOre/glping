import asyncio
import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from .async_gitlab_api import AsyncGitLabAPI
from .base_watcher import BaseWatcher
from .cache import Cache
from .config import Config
from .notifier import Notifier
from .utils.url_utils import get_event_url


class AsyncGitLabWatcher(BaseWatcher):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π GitLab."""

    def __init__(self, config: Config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è."""
        super().__init__(config)
        self.api = AsyncGitLabAPI(config.gitlab_url, config.gitlab_token)
        self.notifier = Notifier()
        self._semaphore = asyncio.Semaphore(10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    async def check_projects(self, verbose: bool = False):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if verbose:
            print(f"[{datetime.now().isoformat()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        last_checked = self.cache.get_last_checked()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        if last_checked:
            if verbose:
                last_checked_dt = datetime.fromisoformat(
                    last_checked.replace("Z", "+00:00")
                ).strftime("%Y-%m-%d %H:%M:%S")
                print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ: {last_checked_dt}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            projects = await self.api.get_projects(
                **self.config.get_project_filter(),
                fields=[
                    "id",
                    "name",
                    "name_with_namespace", 
                    "path_with_namespace",
                    "last_activity_at",
                ],
                last_activity_after=last_checked,
            )
            
            if verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(projects)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            if verbose:
                print("üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
            
            projects = await self.api.get_projects(
                **self.config.get_project_filter(),
                fields=[
                    "id",
                    "name",
                    "name_with_namespace",
                    "path_with_namespace", 
                    "last_activity_at",
                ],
            )
            
            if verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        filtered_projects = []
        for project in projects:
            project_id = project["id"]
            last_activity = project.get("last_activity_at")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if last_activity:
                await self.cache.set_project_activity_async(project_id, last_activity)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            if last_checked and last_activity:
                try:
                    activity_dt = datetime.fromisoformat(last_activity.replace("Z", "+00:00"))
                    last_checked_dt = datetime.fromisoformat(last_checked.replace("Z", "+00:00"))
                    if activity_dt > last_checked_dt:
                        filtered_projects.append(project)
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞–º–∏, –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    filtered_projects.append(project)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                filtered_projects.append(project)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        projects = filtered_projects
        
        if verbose and last_checked:
            print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        tasks = []
        for project in projects:
            task = asyncio.create_task(self._check_project_events(project, verbose))
            tasks.append(task)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(*tasks, return_exceptions=True)

        await self.cache.set_last_checked_async(datetime.now(timezone.utc).isoformat())

    async def _check_project_events(
        self, project: Dict[str, Any], verbose: bool = False
    ):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        async with self._semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            project_id = project["id"]
            project_name = project.get(
                "name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}")
            )

            if verbose:
                print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")

            last_event_id = self.cache.get_last_event_id(project_id)
            last_checked = self.cache.get_last_checked()

            try:
                if last_event_id is None:
                    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ —Ñ–∏–ª—å—Ç—Ä
                    events = await self.api.get_project_events(
                        project_id, after=last_checked
                    )
                    if verbose:
                        last_checked_dt = datetime.fromisoformat(
                            last_checked.replace("Z", "+00:00")
                        ).strftime("%Y-%m-%d %H:%M:%S")
                        print(f"    –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å {last_checked_dt}")
                else:
                    events = await self.api.get_project_events(project_id)
                    if verbose:
                        print(
                            f"    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID: {last_event_id})"
                        )

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                last_checked_dt = datetime.fromisoformat(
                    last_checked.replace("Z", "+00:00")
                )
                filtered_events = []
                skipped_old_events = 0

                for event in events:
                    event_id = event.get("id")
                    created_at = event.get("created_at", "")

                    if created_at:
                        try:
                            event_dt = datetime.fromisoformat(
                                created_at.replace("Z", "+00:00")
                            )
                            if event_dt > last_checked_dt:
                                if event_id and (
                                    last_event_id is None or event_id > last_event_id
                                ):
                                    filtered_events.append(event)
                            else:
                                skipped_old_events += 1
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            if event_id and (
                                last_event_id is None or event_id > last_event_id
                            ):
                                filtered_events.append(event)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                        if event_id and (
                            last_event_id is None or event_id > last_event_id
                        ):
                            filtered_events.append(event)

                if verbose and skipped_old_events > 0:
                    print(
                        f"    –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_old_events} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)"
                    )

                if filtered_events:
                    if verbose:
                        print(f"    –ù–∞–π–¥–µ–Ω–æ {len(filtered_events)} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    tasks = []
                    for event in sorted(filtered_events, key=lambda x: x.get("id", 0)):
                        task = asyncio.create_task(
                            self._process_event_async(event, project_name, project_id)
                        )
                        tasks.append(task)

                    await asyncio.gather(*tasks, return_exceptions=True)

                    latest_event_id = max(
                        event.get("id", 0) for event in filtered_events
                    )
                    await self.cache.set_last_event_id_async(
                        project_id, latest_event_id
                    )
                else:
                    if verbose:
                        print(f"    –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º CI/CD —Å–æ–±—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
                await self._check_pipeline_events(project, verbose, last_checked_dt)
                await self._check_job_events(project, verbose, last_checked_dt)
                await self._check_deployment_events(project, verbose, last_checked_dt)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    async def _process_event_async(
        self, event: Dict[str, Any], project_name: str, project_id: int
    ):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        event_id = event.get("id")
        created_at = event.get("created_at", "")
        description = self.api.get_event_description(event)

        timestamp = datetime.fromisoformat(created_at.replace("Z", "+00:00")).strftime(
            "%Y-%m-%d %H:%M:%S"
        )

        console_message = f"[{timestamp}] –ò–ù–§–û: [–ü—Ä–æ–µ–∫—Ç: {project_name}] {description}"
        print(console_message)

        url = await self._get_event_url_async(event, project_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è –∏–∫–æ–Ω–∫–∏
        author = event.get("author", {})
        author_avatar = author.get("avatar_url")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É: –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ - –ª–æ–≥–æ—Ç–∏–ø GitLab
        icon_url = (
            author_avatar
            if author_avatar
            else "https://gitlab.com/assets/favicon-72a2cad5025aa931d6ea56c3201d1f18e8951c71e3363e712a476bead75f0a83.png"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        await asyncio.to_thread(
            self.notifier.send_notification,
            title=project_name,
            message=description,
            url=url,
            icon_url=icon_url,
        )

    async def _get_project_path_async(self, project_id: int) -> Optional[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –µ–≥–æ ID"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        if project_id in self._project_paths_cache:
            return self._project_paths_cache[project_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª–µ
        cached_path = self.cache.get_project_path(project_id)
        if cached_path:
            self._project_paths_cache[project_id] = cached_path
            return cached_path

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            projects = await self.api.get_projects(project_id=project_id)
            if projects:
                project = projects[0]
                path_with_namespace = project.get("path_with_namespace")
                if path_with_namespace:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–∞ –∫—ç—à–∞
                    self._project_paths_cache[project_id] = path_with_namespace
                    await self.cache.set_project_path_async(
                        project_id, path_with_namespace
                    )
                    return path_with_namespace
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")

        return None

    async def _get_event_url_async(self, event: Dict[str, Any], project_id: int) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        target_type = event.get("target_type")
        target_id = event.get("target_id")
        target_iid = event.get("target_iid")
        action_name = event.get("action_name")
        push_data = event.get("push_data", {})

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤–º–µ—Å—Ç–æ ID
        project_path = await self._get_project_path_async(project_id)
        if not project_path:
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å ID –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            project_path = str(project_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ push —Å–æ–±—ã—Ç–∏–π
        if action_name in ["pushed", "pushed new", "pushed to"] and push_data:
            commit_from = push_data.get("commit_from")
            commit_to = push_data.get("commit_to")
            ref = push_data.get("ref")

            if commit_to:
                return f"{self.config.gitlab_url}/{project_path}/-/commit/{commit_to}"
            elif ref and ref.startswith("refs/heads/"):
                branch = ref.replace("refs/heads/", "")
                return f"{self.config.gitlab_url}/{project_path}/-/tree/{branch}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if target_type == "MergeRequest":
            if target_iid:
                return f"{self.config.gitlab_url}/{project_path}/-/merge_requests/{target_iid}"
            elif target_id:
                return f"{self.config.gitlab_url}/{project_path}/-/merge_requests/{target_id}"
        elif target_type == "Issue":
            if target_iid:
                return f"{self.config.gitlab_url}/{project_path}/-/issues/{target_iid}"
            elif target_id:
                return f"{self.config.gitlab_url}/{project_path}/-/issues/{target_id}"
        elif target_type in ["Note", "DiffNote"] and target_id:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º–æ–º –æ–±—ä–µ–∫—Ç–µ
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ note, –ø–æ—Ç–æ–º –≤ data (—Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ API)
            note_data = event.get("note", {})
            noteable_type = note_data.get("noteable_type") or event.get("data", {}).get("noteable_type")
            noteable_iid = note_data.get("noteable_iid") or event.get("data", {}).get("noteable_iid")

            # DiffNote –∏ Note –∫ MergeRequest
            if noteable_type == "MergeRequest" and noteable_iid:
                if target_type == "DiffNote":
                    # –î–ª—è DiffNote –∏—Å–ø–æ–ª—å–∑—É–µ–º discussion_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    discussion_id = note_data.get("discussion_id")
                    if discussion_id:
                        return f"{self.config.gitlab_url}/{project_path}/-/merge_requests/{noteable_iid}#note_{target_id}"
                    else:
                        return f"{self.config.gitlab_url}/{project_path}/-/merge_requests/{noteable_iid}#note_{target_id}"
                else:
                    return f"{self.config.gitlab_url}/{project_path}/-/merge_requests/{noteable_iid}#note_{target_id}"
            elif noteable_type == "Issue" and noteable_iid:
                return f"{self.config.gitlab_url}/{project_path}/-/issues/{noteable_iid}#note_{target_id}"
            elif noteable_type == "Commit":
                # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∫–æ–º–º–∏—Ç—É –Ω—É–∂–µ–Ω commit_id
                commit_id = note_data.get("commit_id")
                if commit_id:
                    return f"{self.config.gitlab_url}/{project_path}/-/commit/{commit_id}#note_{target_id}"
        elif target_type == "Commit" and target_id:
            return f"{self.config.gitlab_url}/{project_path}/-/commit/{target_id}"
        elif target_type == "Pipeline" and target_id:
            return f"{self.config.gitlab_url}/{project_path}/-/pipelines/{target_id}"

        return f"{self.config.gitlab_url}/{project_path}"

    async def run_once(self, verbose: bool = False):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        async with self.api:
            if not await self.api.test_connection():
                return False

            print(
                f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ GitLab watcher (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫)..."
            )
            await self.check_projects(verbose)
            print(f"[{datetime.now().isoformat()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

    async def run_daemon(self, verbose: bool = False):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞"""
        async with self.api:
            if not await self.api.test_connection():
                return False

            print(
                f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ GitLab watcher (—Ä–µ–∂–∏–º –¥–µ–º–æ–Ω–∞)..."
            )
            print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config.check_interval} —Å–µ–∫—É–Ω–¥")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            try:
                while True:
                    await self.check_projects(verbose)
                    await asyncio.sleep(self.config.check_interval)
            except KeyboardInterrupt:
                print(f"\n[{datetime.now().isoformat()}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GitLab watcher...")
                return True

    def reset_cache(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à"""
        self.cache.reset()
        print("–ö–µ—à —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω")

    async def _check_pipeline_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pipeline —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import pipeline_to_event, is_new_pipeline_event, save_pipeline_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º pipelines, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            pipelines = await self.api.get_project_pipelines(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ pipelines: {len(pipelines)}")
            
            if not pipelines:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pipelines
            new_pipeline_events = []
            for pipeline in pipelines:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pipeline –Ω–æ–≤—ã–π
                if is_new_pipeline_event(pipeline, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pipeline –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = pipeline_to_event(pipeline, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            pipeline_dt = datetime.fromisoformat(
                                pipeline["created_at"].replace("Z", "+00:00")
                            )
                            if pipeline_dt > last_checked_dt:
                                new_pipeline_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_pipeline_events.append(event)
                    else:
                        new_pipeline_events.append(event)
            
            if new_pipeline_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_pipeline_events)} –Ω–æ–≤—ã—Ö pipeline —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pipeline —Å–æ–±—ã—Ç–∏—è
                tasks = []
                for event in sorted(new_pipeline_events, key=lambda x: x.get("created_at", "")):
                    task = asyncio.create_task(
                        self._process_event_async(event, project_name, project_id)
                    )
                    tasks.append(task)
                
                await asyncio.gather(*tasks, return_exceptions=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º pipeline —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for pipeline in pipelines:
                    save_pipeline_event_to_cache(pipeline, project_id, self.cache)
                
                if verbose:
                    print(f"    Pipeline —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pipelines: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pipelines –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    async def _check_job_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ job —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import job_to_event, is_new_job_event, save_job_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º jobs, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            jobs = await self.api.get_project_jobs(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ jobs: {len(jobs)}")
            
            if not jobs:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º jobs
            new_job_events = []
            for job in jobs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å
                if is_new_job_event(job, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º job –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = job_to_event(job, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            job_dt = datetime.fromisoformat(
                                job["created_at"].replace("Z", "+00:00")
                            )
                            if job_dt > last_checked_dt:
                                new_job_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_job_events.append(event)
                    else:
                        new_job_events.append(event)
            
            if new_job_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_job_events)} –Ω–æ–≤—ã—Ö job —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º job —Å–æ–±—ã—Ç–∏—è
                tasks = []
                for event in sorted(new_job_events, key=lambda x: x.get("created_at", "")):
                    task = asyncio.create_task(
                        self._process_event_async(event, project_name, project_id, verbose)
                    )
                    tasks.append(task)
                
                if tasks:
                    await asyncio.gather(*tasks)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º job —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for job in jobs:
                    save_job_event_to_cache(job, project_id, self.cache)
                
                if verbose:
                    print(f"    Job —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ jobs: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ jobs –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    async def _check_deployment_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ deployment —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import deployment_to_event, is_new_deployment_event, save_deployment_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º deployments, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            deployments = await self.api.get_project_deployments(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ deployments: {len(deployments)}")
            
            if not deployments:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deployments
            new_deployment_events = []
            for deployment in deployments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deployment –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å
                if is_new_deployment_event(deployment, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º deployment –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = deployment_to_event(deployment, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            deployment_dt = datetime.fromisoformat(
                                deployment["created_at"].replace("Z", "+00:00")
                            )
                            if deployment_dt > last_checked_dt:
                                new_deployment_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_deployment_events.append(event)
                    else:
                        new_deployment_events.append(event)
            
            if new_deployment_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_deployment_events)} –Ω–æ–≤—ã—Ö deployment —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deployment —Å–æ–±—ã—Ç–∏—è
                tasks = []
                for event in sorted(new_deployment_events, key=lambda x: x.get("created_at", "")):
                    task = asyncio.create_task(
                        self._process_event_async(event, project_name, project_id, verbose)
                    )
                    tasks.append(task)
                
                if tasks:
                    await asyncio.gather(*tasks)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º deployment —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for deployment in deployments:
                    save_deployment_event_to_cache(deployment, project_id, self.cache)
                
                if verbose:
                    print(f"    Deployment —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ deployments: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ deployments –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.notifier.test_notification()
