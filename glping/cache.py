import asyncio
import json
import os
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, List, Optional
import fcntl
import tempfile


class Cache:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º —Å–æ–±—ã—Ç–∏–π GitLab"""

    def __init__(self, cache_file: str = "cache.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞"""
        # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.isabs(cache_file):
            glping_dir = os.path.expanduser("~/glping")
            os.makedirs(glping_dir, exist_ok=True)
            self.cache_file = os.path.join(glping_dir, cache_file)
        else:
            self.cache_file = cache_file
        self.data: Dict[str, Any] = self._load_cache()
        self._migrate_old_cache_files()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ
        print(f"üìÇ –§–∞–π–ª –∫–µ—à–∞: {self.cache_file}")
        if os.path.exists(self.cache_file):
            last_checked = self.data.get("metadata", {}).get("last_checked")
            if last_checked:
                print(f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked}")
            projects_with_events = len(self.data.get("projects", {}))
            projects_with_activity = len(self.data.get("project_activity", {}))
            print(f"üìä –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å —Å–æ–±—ã—Ç–∏—è–º–∏: {projects_with_events}")
            print(f"üìà –ü—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: {projects_with_activity}")
        else:
            print("üìÇ –§–∞–π–ª –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")

    def _load_cache(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.cache_file):
            try:
                with open(self.cache_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–µ—à–∞
                    if "metadata" in data and "projects" in data:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                        if data["metadata"].get("last_checked") is None:
                            day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
                            data["metadata"]["last_checked"] = day_ago.isoformat()
                        return data
                    else:
                        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                        converted_data = self._convert_old_format(data)
                        # –ï—Å–ª–∏ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                        if converted_data["metadata"].get("last_checked") is None:
                            day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
                            converted_data["metadata"]["last_checked"] = day_ago.isoformat()
                        return converted_data
            except (json.JSONDecodeError, IOError) as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–µ—à–∞ {self.cache_file}: {e}")
                print("üîÑ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–µ—à–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –¥–∞—Ç–æ–π 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
        return {
            "metadata": {
                "last_checked": day_ago.isoformat()
            },
            "projects": {},
            "project_activity": {}
        }

    def _convert_old_format(self, old_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–µ—à–∞ –≤ –Ω–æ–≤—ã–π"""
        last_checked = old_data.get("last_checked")
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        if last_checked is None:
            day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
            last_checked = day_ago.isoformat()
        
        return {
            "metadata": {
                "last_checked": last_checked
            },
            "projects": old_data.get("projects", {}),
            "project_activity": {}
        }

    def _migrate_old_cache_files(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        migrated = False
        glping_dir = os.path.expanduser("~/glping")

        # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–µ—à –ø—É—Å—Ç–æ–π –∏ —ç—Ç–æ —Ñ–∞–π–ª –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (not self.data.get("projects") and 
            not self.data.get("project_activity") and 
            self.cache_file.startswith(glping_dir)):
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è cache.json –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            old_cache_file = os.path.join(glping_dir, "cache.json")
            if os.path.exists(old_cache_file):
                try:
                    with open(old_cache_file, "r", encoding="utf-8") as f:
                        data = json.load(f)
                        if "last_checked" in data:
                            self.data["metadata"]["last_checked"] = data["last_checked"]
                        if "projects" in data:
                            self.data["projects"] = data["projects"]
                            migrated = True
                            print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {old_cache_file}")
                except (json.JSONDecodeError, IOError) as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {old_cache_file}: {e}")

            # –ú–∏–≥—Ä–∞—Ü–∏—è project_activity_cache.json –∏–∑ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            old_activity_file = os.path.join(glping_dir, "project_activity_cache.json")
            if os.path.exists(old_activity_file):
                try:
                    with open(old_activity_file, "r", encoding="utf-8") as f:
                        data = json.load(f)
                        self.data["project_activity"] = {int(k): v for k, v in data.items()}
                        migrated = True
                        print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {old_activity_file}")
                except (json.JSONDecodeError, IOError) as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {old_activity_file}: {e}")

        # –ï—Å–ª–∏ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        if migrated:
            self._save_cache()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–µ—à–∞")

    def _save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –≤ —Ñ–∞–π–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–æ–Ω–∫–∏"""
        try:
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = None
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                temp_fd, temp_file = tempfile.mkstemp(
                    prefix=f"glping_cache_{os.getpid()}_", 
                    dir=os.path.dirname(self.cache_file)
                )
                
                with os.fdopen(temp_fd, "w", encoding="utf-8") as f:
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                    fcntl.flock(f, fcntl.LOCK_EX)
                    json.dump(self.data, f, indent=2, ensure_ascii=False)
                    f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–∫
                    os.fsync(f.fileno())  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                
                # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
                os.replace(temp_file, self.cache_file)
                temp_file = None  # –§–∞–π–ª —É–∂–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω
                
            except (ImportError, AttributeError):
                # –ï—Å–ª–∏ fcntl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Windows), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–ø–∏—Å—å
                with open(self.cache_file, "w", encoding="utf-8") as f:
                    json.dump(self.data, f, indent=2, ensure_ascii=False)
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è
                if temp_file and os.path.exists(temp_file):
                    try:
                        os.unlink(temp_file)
                    except OSError:
                        pass
                        
        except IOError as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–µ—à: {e}")

    async def _save_cache_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞"""
        await asyncio.to_thread(self._save_cache)

    

    def get_last_event_id(self, project_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        return self.data["projects"].get(str(project_id), {}).get("last_event_id")

    def set_last_event_id(self, project_id: int, event_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        if str(project_id) not in self.data["projects"]:
            self.data["projects"][str(project_id)] = {}
        self.data["projects"][str(project_id)]["last_event_id"] = event_id
        self._save_cache()

    async def set_last_event_id_async(self, project_id: int, event_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        if str(project_id) not in self.data["projects"]:
            self.data["projects"][str(project_id)] = {}
        self.data["projects"][str(project_id)]["last_event_id"] = event_id
        await self._save_cache_async()

    def get_last_checked(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return self.data["metadata"].get("last_checked")

    def set_last_checked(self, timestamp: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.data["metadata"]["last_checked"] = timestamp
        self._save_cache()

    async def set_last_checked_async(self, timestamp: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        self.data["metadata"]["last_checked"] = timestamp
        await self._save_cache_async()

    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à"""
        day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
        self.data = {
            "metadata": {
                "last_checked": day_ago.isoformat()
            },
            "projects": {},
            "project_activity": {}
        }
        self._save_cache()

    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç –ª–∏ –∫–µ—à"""
        return not self.data["projects"]

    

    def get_project_path(self, project_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–µ—à–∞"""
        project_paths = self.data.get("project_paths", {})
        return project_paths.get(str(project_id))

    def save_project_path(self, project_id: int, path: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à"""
        if "project_paths" not in self.data:
            self.data["project_paths"] = {}
        self.data["project_paths"][str(project_id)] = path
        self._save_cache()

    def save_project_event(self, project_id: int, event_id: Any):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à"""
        if "projects" not in self.data:
            self.data["projects"] = {}

        project_id_str = str(project_id)
        if project_id_str not in self.data["projects"]:
            self.data["projects"][project_id_str] = {"events": []}

        events = self.data["projects"][project_id_str]["events"]
        if event_id not in events:
            events.append(event_id)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if len(events) > 100:
                events[:] = events[-100:]
            self._save_cache()

    def get_project_events(self, project_id: int) -> Optional[List]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–µ—à–∞"""
        projects = self.data.get("projects", {})
        project_data = projects.get(str(project_id), {})
        return project_data.get("events", [])

    def get_project_activity(self, project_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫–µ—à–∞"""
        return self.data["project_activity"].get(project_id)

    def set_project_activity(self, project_id: int, activity_time: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à"""
        self.data["project_activity"][project_id] = activity_time
        self._save_cache()

    async def set_project_activity_async(self, project_id: int, activity_time: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–µ—à"""
        self.data["project_activity"][project_id] = activity_time
        await self._save_cache_async()

    

    def get_installation_date(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç last_checked)"""
        return self.data["metadata"]["last_checked"]

    def reset_installation_date(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç last_checked)"""
        day_ago = datetime.now(timezone.utc) - timedelta(hours=24)
        self.data["metadata"]["last_checked"] = day_ago.isoformat()
        print("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
