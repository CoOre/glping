import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from .base_watcher import BaseWatcher
from .cache import Cache
from .config import Config
from .gitlab_api import GitLabAPI
from .notifier import Notifier
from .utils.url_utils import get_event_url


class GitLabWatcher(BaseWatcher):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π GitLab."""

    def __init__(self, config: Config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è."""
        super().__init__(config)
        self.api = GitLabAPI(config.gitlab_url, config.gitlab_token)
        self.notifier = Notifier()
        # _project_paths —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ

    def check_projects(self, verbose: bool = False):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if verbose:
            print(f"[{datetime.now().isoformat()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        last_checked = self.cache.get_last_checked()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        if last_checked:
            if verbose:
                last_checked_dt = datetime.fromisoformat(
                    last_checked.replace("Z", "+00:00")
                ).strftime("%Y-%m-%d %H:%M:%S")
                print(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ: {last_checked_dt}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            projects = self.api.get_projects(
                **self.config.get_project_filter(),
                last_activity_after=last_checked,
            )
            
            if verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(projects)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            if verbose:
                print("üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
            
            projects = self.api.get_projects(**self.config.get_project_filter())
            
            if verbose:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        for project in projects:
            self._check_project_events(project, verbose)

        self.cache.set_last_checked(datetime.now(timezone.utc).isoformat())

    def _check_project_events(self, project: Dict[str, Any], verbose: bool = False):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        project_id = project["id"]
        project_name = project.get(
            "name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}")
        )

        if verbose:
            print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")

        last_event_id = self.cache.get_last_event_id(project_id)
        last_checked = self.cache.get_last_checked()

        try:
            if last_event_id is None:
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å after –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º ISO –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                    if last_checked.endswith('Z'):
                        last_checked_dt = datetime.fromisoformat(last_checked[:-1] + '+00:00')
                    else:
                        last_checked_dt = datetime.fromisoformat(last_checked)
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ –≤ UTC
                    if last_checked_dt.tzinfo is None:
                        last_checked_dt = last_checked_dt.replace(tzinfo=timezone.utc)
                    
                    after_date = last_checked_dt.strftime("%Y-%m-%d")
                    events = self.api.get_project_events(project_id, after=after_date)
                    if verbose:
                        print(
                            f"    –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å {after_date}"
                        )
                        print(f"    –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –æ—Ç API: {len(events)}")
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
                    if verbose:
                        print(
                            f"    –û—à–∏–±–∫–∞ —Å after –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {e}, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è"
                        )
                    events = self.api.get_project_events(project_id)
                    if verbose:
                        print(f"    –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –æ—Ç API (–±–µ–∑ after): {len(events)}")
            else:
                events = self.api.get_project_events(project_id)
                if verbose:
                    print(
                        f"    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID: {last_event_id})"
                    )

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                if last_checked.endswith('Z'):
                    last_checked_dt = datetime.fromisoformat(last_checked[:-1] + '+00:00')
                else:
                    last_checked_dt = datetime.fromisoformat(last_checked)
                
                if last_checked_dt.tzinfo is None:
                    last_checked_dt = last_checked_dt.replace(tzinfo=timezone.utc)
            except (ValueError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–∏—Ö —Å—É—Ç–æ–∫
                last_checked_dt = datetime.now(timezone.utc).replace(
                    hour=0, minute=0, second=0, microsecond=0
                )
            
            filtered_events = []
            skipped_old_events = 0

            for event in events:
                event_id = event.get("id")
                created_at = event.get("created_at", "")

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
                event_dt = None
                if created_at:
                    try:
                        if created_at.endswith('Z'):
                            event_dt = datetime.fromisoformat(created_at[:-1] + '+00:00')
                        else:
                            event_dt = datetime.fromisoformat(created_at)
                        
                        if event_dt.tzinfo is None:
                            event_dt = event_dt.replace(tzinfo=timezone.utc)
                    except (ValueError, TypeError):
                        event_dt = None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–µ–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                is_recent = event_dt is None or event_dt > last_checked_dt
                
                if is_recent:
                    # –î–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º ID
                    if event_id and (last_event_id is None or event_id > last_event_id):
                        filtered_events.append(event)
                else:
                    skipped_old_events += 1

            if verbose and skipped_old_events > 0:
                print(
                    f"    –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_old_events} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)"
                )

            if filtered_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(filtered_events)} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")

                for event in sorted(filtered_events, key=lambda x: x.get("id", 0)):
                    self._process_event(event, project_name, project_id, verbose)

                latest_event_id = max(event.get("id", 0) for event in filtered_events)
                self.cache.set_last_event_id(project_id, latest_event_id)
            else:
                if verbose:
                    print(f"    –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CI/CD —Å–æ–±—ã—Ç–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
            self._check_pipeline_events(project, verbose, last_checked_dt)
            self._check_job_events(project, verbose, last_checked_dt)
            self._check_deployment_events(project, verbose, last_checked_dt)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def _process_event(
        self,
        event: Dict[str, Any],
        project_name: str,
        project_id: int,
        verbose: bool = False,
    ):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        event_id = event.get("id")
        created_at = event.get("created_at", "")
        description = self.api.get_event_description(event)

        timestamp = datetime.fromisoformat(created_at.replace("Z", "+00:00")).strftime(
            "%Y-%m-%d %H:%M:%S"
        )

        console_message = f"[{timestamp}] –ò–ù–§–û: [–ü—Ä–æ–µ–∫—Ç: {project_name}] {description}"
        print(console_message)

        url = self.get_event_url(event, project_id)

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è URL
        target_type = event.get("target_type")
        target_iid = event.get("target_iid")
        target_id = event.get("target_id")
        print(
            f"    DEBUG: target_type={target_type}, target_iid={target_iid}, target_id={target_id}"
        )
        print(f"    DEBUG: URL={url}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –¥–ª—è –∏–∫–æ–Ω–∫–∏
        author = event.get("author", {})
        author_avatar = author.get("avatar_url")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É: –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ - –ª–æ–≥–æ—Ç–∏–ø GitLab
        icon_url = (
            author_avatar
            if author_avatar
            else "https://gitlab.com/assets/favicon-72a2cad5025aa931d6ea56c3201d1f18e8951c71e3363e712a476bead75f0a83.png"
        )

        self.notifier.send_notification(
            title=project_name,
            message=description,
            url=url,
            icon_url=icon_url,
        )

    def _get_project_path(self, project_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –µ–≥–æ ID."""
        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        path = super()._get_project_path(project_id)
        if path:
            return path

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ API
            projects = self.api.get_projects(project_id=project_id)
            if projects:
                project = projects[0]
                path_with_namespace = project.get("path_with_namespace")
                if path_with_namespace:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                    self._cache_project_path(project_id, path_with_namespace)
                    return path_with_namespace
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {e}")

        return ""

    # –ú–µ—Ç–æ–¥ _get_event_url —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_event_url –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞

    def run_once(self, verbose: bool = False):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if not self.api.test_connection():
            return False

        print(
            f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ GitLab watcher (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫)..."
        )
        self.check_projects(verbose)
        print(f"[{datetime.now().isoformat()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True

    def run_daemon(self, verbose: bool = False):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞"""
        if not self.api.test_connection():
            return False

        print(f"[{datetime.now().isoformat()}] –ó–∞–ø—É—Å–∫ GitLab watcher (—Ä–µ–∂–∏–º –¥–µ–º–æ–Ω–∞)...")
        print(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config.check_interval} —Å–µ–∫—É–Ω–¥")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        try:
            while True:
                self.check_projects(verbose)
                time.sleep(self.config.check_interval)
        except KeyboardInterrupt:
            print(f"\n[{datetime.now().isoformat()}] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GitLab watcher...")
            return True

    def reset_cache(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à"""
        self.cache.reset()
        print("–ö–µ—à —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω")

    def _check_pipeline_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ pipeline —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import pipeline_to_event, is_new_pipeline_event, save_pipeline_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º pipelines, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            pipelines = self.api.get_project_pipelines(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ pipelines: {len(pipelines)}")
            
            if not pipelines:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pipelines
            new_pipeline_events = []
            for pipeline in pipelines:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pipeline –Ω–æ–≤—ã–π
                if is_new_pipeline_event(pipeline, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pipeline –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = pipeline_to_event(pipeline, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            pipeline_dt = datetime.fromisoformat(
                                pipeline["created_at"].replace("Z", "+00:00")
                            )
                            if pipeline_dt > last_checked_dt:
                                new_pipeline_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_pipeline_events.append(event)
                    else:
                        new_pipeline_events.append(event)
            
            if new_pipeline_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_pipeline_events)} –Ω–æ–≤—ã—Ö pipeline —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pipeline —Å–æ–±—ã—Ç–∏—è
                for event in sorted(new_pipeline_events, key=lambda x: x.get("created_at", "")):
                    self._process_event(event, project_name, project_id, verbose)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º pipeline —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for pipeline in pipelines:
                    save_pipeline_event_to_cache(pipeline, project_id, self.cache)
                
                if verbose:
                    print(f"    Pipeline —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pipelines: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ pipelines –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def _check_job_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ job —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import job_to_event, is_new_job_event, save_job_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º jobs, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            jobs = self.api.get_project_jobs(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ jobs: {len(jobs)}")
            
            if not jobs:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º jobs
            new_job_events = []
            for job in jobs:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ job –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å
                if is_new_job_event(job, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º job –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = job_to_event(job, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            job_dt = datetime.fromisoformat(
                                job["created_at"].replace("Z", "+00:00")
                            )
                            if job_dt > last_checked_dt:
                                new_job_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_job_events.append(event)
                    else:
                        new_job_events.append(event)
            
            if new_job_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_job_events)} –Ω–æ–≤—ã—Ö job —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º job —Å–æ–±—ã—Ç–∏—è
                for event in sorted(new_job_events, key=lambda x: x.get("created_at", "")):
                    self._process_event(event, project_name, project_id, verbose)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º job —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for job in jobs:
                    save_job_event_to_cache(job, project_id, self.cache)
                
                if verbose:
                    print(f"    Job —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ jobs: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ jobs –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def _check_deployment_events(
        self, project: Dict[str, Any], verbose: bool = False, last_checked_dt: Optional[datetime] = None
    ):
        """–û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ deployment —Å–æ–±—ã—Ç–∏–π"""
        from .utils.event_utils import deployment_to_event, is_new_deployment_event, save_deployment_event_to_cache
        
        project_id = project["id"]
        project_name = project.get("name_with_namespace", project.get("name", f"–ü—Ä–æ–µ–∫—Ç {project_id}"))
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º deployments, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            updated_after = last_checked_dt.isoformat() if last_checked_dt else None
            deployments = self.api.get_project_deployments(project_id, updated_after=updated_after)
            
            if verbose:
                print(f"    –ù–∞–π–¥–µ–Ω–æ deployments: {len(deployments)}")
            
            if not deployments:
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deployments
            new_deployment_events = []
            for deployment in deployments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ deployment –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å
                if is_new_deployment_event(deployment, project_id, self.cache):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º deployment –≤ —Å–æ–±—ã—Ç–∏–µ
                    event = deployment_to_event(deployment, project)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
                    if last_checked_dt:
                        try:
                            deployment_dt = datetime.fromisoformat(
                                deployment["created_at"].replace("Z", "+00:00")
                            )
                            if deployment_dt > last_checked_dt:
                                new_deployment_events.append(event)
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                            new_deployment_events.append(event)
                    else:
                        new_deployment_events.append(event)
            
            if new_deployment_events:
                if verbose:
                    print(f"    –ù–∞–π–¥–µ–Ω–æ {len(new_deployment_events)} –Ω–æ–≤—ã—Ö deployment —Å–æ–±—ã—Ç–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deployment —Å–æ–±—ã—Ç–∏—è
                for event in sorted(new_deployment_events, key=lambda x: x.get("created_at", "")):
                    self._process_event(event, project_name, project_id, verbose)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º deployment —Å–æ–±—ã—Ç–∏—è –≤ –∫–µ—à
                for deployment in deployments:
                    save_deployment_event_to_cache(deployment, project_id, self.cache)
                
                if verbose:
                    print(f"    Deployment —Å–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")
            
        except Exception as e:
            if verbose:
                print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ deployments: {e}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ deployments –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}: {e}")

    def test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.notifier.test_notification()
