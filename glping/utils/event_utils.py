"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π GitLab."""

from typing import Any, Dict
from .date_utils import format_event_date


def get_pipeline_status_emoji(status: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ pipeline.

    Args:
        status: –°—Ç–∞—Ç—É—Å pipeline

    Returns:
        Emoji —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å—É
    """
    status_emojis = {
        "success": "‚úÖ",
        "failed": "‚ùå",
        "running": "üèÉ",
        "pending": "‚è≥",
        "canceled": "üö´",
    }
    return status_emojis.get(status, "‚ùì")


def get_event_description(event: Dict[str, Any]) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

    Args:
        event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ GitLab API

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
    """
    event_type = event.get("target_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    action_name = event.get("action_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    author_name = event.get("author", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    push_data = event.get("push_data", {})

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    event_date = format_event_date(event.get("created_at", ""))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ push —Å–æ–±—ã—Ç–∏–π
    if action_name in ["pushed", "pushed new", "pushed to"] and push_data:
        ref = push_data.get("ref", "")
        commit_count = push_data.get("commit_count", 0)
        action = push_data.get("action", "")
        commit_title = push_data.get("commit_title", "")

        if ref.startswith("refs/heads/"):
            branch = ref.replace("refs/heads/", "")
            if action == "removed":
                description = f"–í–µ—Ç–∫–∞ {branch} —É–¥–∞–ª–µ–Ω–∞ {author_name}"
            elif commit_count > 0:
                if commit_count == 1:
                    # –î–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    description = f"Push –≤ {branch} –æ—Ç {author_name}"
                    if commit_title:
                        description += f": {commit_title}"
                else:
                    # –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–µ—Ä–≤—ã–π
                    description = f"Push –≤ {branch} –æ—Ç {author_name} ({commit_count} –∫–æ–º–º–∏—Ç–æ–≤)"
                    if commit_title:
                        description += f": {commit_title}"
            else:
                description = f"Push –≤ –≤–µ—Ç–∫—É {branch} –æ—Ç {author_name}"
        else:
            description = f"–ù–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã –æ—Ç {author_name}"
            if commit_title:
                description += f": {commit_title}"

        return f"{description} {event_date}".strip()

    if event_type == "MergeRequest":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ MR –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        target_title = event.get("target_title", "")

        if action_name == "opened":
            description = f"–ù–æ–≤—ã–π Merge Request –æ—Ç {author_name}"
        elif action_name == "updated":
            description = f"Merge Request –æ–±–Ω–æ–≤–ª–µ–Ω {author_name}"
        elif action_name == "closed":
            description = f"Merge Request –∑–∞–∫—Ä—ã—Ç {author_name}"
        elif action_name == "merged":
            description = f"Merge Request —Å–º–µ—Ä–∂–µ–Ω {author_name}"
        elif action_name == "approved":
            description = f"Merge Request –æ–¥–æ–±—Ä–µ–Ω {author_name}"
        else:
            description = f"Merge Request {action_name} –æ—Ç {author_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ MR –µ—Å–ª–∏ –µ—Å—Ç—å
        if target_title:
            description += f": {target_title}"

        return f"{description} {event_date}".strip()

    elif event_type == "Issue":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        target_title = event.get("target_title", "")

        if action_name == "opened":
            description = f"–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç {author_name}"
        elif action_name == "closed":
            description = f"–ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ {author_name}"
        elif action_name == "reopened":
            description = f"–ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞ {author_name}"
        else:
            description = f"–ó–∞–¥–∞—á–∞ {action_name} –æ—Ç {author_name}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if target_title:
            description += f": {target_title}"

        return f"{description} {event_date}".strip()

    elif event_type in ["Note", "DiffNote"]:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫ —á–µ–º—É –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è
        note_data = event.get("note", {})
        note_body = note_data.get("body", "")
        noteable_type = note_data.get("noteable_type", "")
        noteable_iid = note_data.get("noteable_iid", "")

        # DiffNote - —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–¥—É –≤ MR
        if event_type == "DiffNote":
            # –î–ª—è DiffNote –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–¥—É
            if noteable_type == "MergeRequest" and noteable_iid:
                context = f" –∫ –∫–æ–¥—É –≤ MR #{noteable_iid}"
            else:
                context = " –∫ –∫–æ–¥—É"
            description = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π{context} –æ—Ç {author_name}"
        else:
            # –û–±—ã—á–Ω—ã–π Note
            context = ""
            if noteable_type == "MergeRequest" and noteable_iid:
                context = f" –∫ MR #{noteable_iid}"
            elif noteable_type == "Issue" and noteable_iid:
                context = f" –∫ –∑–∞–¥–∞—á–µ #{noteable_iid}"
            elif noteable_type == "Commit":
                context = " –∫ –∫–æ–º–º–∏—Ç—É"
            description = f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π{context} –æ—Ç {author_name}"

        if note_body:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤
            if len(note_body) > 150:
                note_body = note_body[:150] + "..."
            description += f": {note_body}"

        return f"{description} {event_date}".strip()

    elif event_type == "Commit":
        description = f"–ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç –æ—Ç {author_name}"
        return f"{description} {event_date}".strip()

    elif event_type == "Pipeline":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ pipeline
        pipeline_data = event.get("data", {})
        status = pipeline_data.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        pipeline_id = event.get("target_id", "")
        ref = pipeline_data.get("ref", "")

        status_map = {
            "success": "—É—Å–ø–µ—à–Ω–æ",
            "failed": "—Å –æ—à–∏–±–∫–æ–π",
            "running": "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            "pending": "–æ–∂–∏–¥–∞–µ—Ç",
            "canceled": "–æ—Ç–º–µ–Ω–µ–Ω",
        }
        status_ru = status_map.get(status, status)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º pipeline
        if pipeline_id:
            description = f"Pipeline #{pipeline_id} {status_ru}"
        else:
            description = f"Pipeline {status_ru}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if ref:
            description += f" –¥–ª—è {ref}"

        description += f" –æ—Ç {author_name}"

        return f"{description} {event_date}".strip()

    else:
        return f"{event_type} {action_name} –æ—Ç {author_name} {event_date}".strip()


def pipeline_to_event(pipeline: Dict[str, Any], project: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pipeline –≤ —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        pipeline: –î–∞–Ω–Ω—ã–µ pipeline –∏–∑ GitLab API
        project: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è
    """
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è pipeline —Å–æ–±—ã—Ç–∏—è
    event_id = f"pipeline_{pipeline['id']}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ pipeline
    user = pipeline.get("user") or {}
    author_name = user.get("name", "–°–∏—Å—Ç–µ–º–∞ CI/CD")
    author_username = user.get("username", "system")
    
    return {
        "id": event_id,
        "target_type": "Pipeline",
        "action_name": "updated",
        "created_at": pipeline["created_at"],
        "updated_at": pipeline.get("updated_at", pipeline["created_at"]),
        "author": {
            "name": author_name,
            "username": author_username,
            "avatar_url": user.get("avatar_url", "")
        },
        "target_id": pipeline["id"],
        "target_iid": pipeline["id"],
        "project_id": project["id"],
        "data": {
            "status": pipeline["status"],
            "ref": pipeline.get("ref", ""),
            "sha": pipeline.get("sha", ""),
            "source": pipeline.get("source", ""),
            "duration": pipeline.get("duration"),
            "web_url": pipeline.get("web_url", "")
        },
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        "push_data": {},
        "note": {}
    }


def is_new_pipeline_event(pipeline: Dict[str, Any], project_id: int, cache) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ pipeline —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤—ã–º.
    
    Args:
        pipeline: –î–∞–Ω–Ω—ã–µ pipeline
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
        cache: –û–±—ä–µ–∫—Ç –∫–µ—à–∞
        
    Returns:
        True –µ—Å–ª–∏ pipeline –Ω–æ–≤—ã–π, False –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    """
    pipeline_id = pipeline["id"]
    event_id = f"pipeline_{pipeline_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–æ–±—ã—Ç–∏–π
    cached_events = cache.get_project_events(project_id)
    if cached_events and event_id in cached_events:
        return False
    
    return True


def save_pipeline_event_to_cache(pipeline: Dict[str, Any], project_id: int, cache):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å pipeline —Å–æ–±—ã—Ç–∏–µ –≤ –∫–µ—à.
    
    Args:
        pipeline: –î–∞–Ω–Ω—ã–µ pipeline
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
        cache: –û–±—ä–µ–∫—Ç –∫–µ—à–∞
    """
    pipeline_id = pipeline["id"]
    event_id = f"pipeline_{pipeline_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞
    if hasattr(cache, 'save_project_event'):
        cache.save_project_event(project_id, event_id)
    else:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        cached_events = cache.get_project_events(project_id) or set()
        cached_events.add(event_id)
        if hasattr(cache, 'data'):
            if 'project_events' not in cache.data:
                cache.data['project_events'] = {}
            cache.data['project_events'][str(project_id)] = list(cached_events)